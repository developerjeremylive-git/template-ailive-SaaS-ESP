import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Link, Navigate } from 'react-router-dom';
import { FiExternalLink, FiUser, FiZap, FiDollarSign, FiCpu } from 'react-icons/fi';
import Header from '../components/Header';
import AnimatedFooter from '../components/AnimatedFooter';
import { useAuth } from '../context/AuthContext';
import { useLanguage } from '../context/LanguageContext';
import ChatWithAuth from '../components/ChatWithAuth';
import DashboardLayout from '../components/DashboardLayout';
import SubscriptionDashboard from '../components/SubscriptionDashboard';

interface HuggingFaceModel {
  id: string;
  name: string;
  description: string;
  tags: string[];
  downloads: number;
  likes: number;
}

export default function StarterDashboardPage() {
  const { user, userSubscription, hasAccess } = useAuth();
  const { t } = useLanguage();
  const [isLoading, setIsLoading] = useState(true);
  const [models, setModels] = useState<HuggingFaceModel[]>([]);
  const [selectedModel, setSelectedModel] = useState<HuggingFaceModel | null>(null);

  // Verify user has access to this dashboard
  const hasStarterAccess = hasAccess('2'); // Starter Plan ID

  useEffect(() => {
    if (!user) return;
    
    // Simulation of fetching popular Hugging Face models
    setIsLoading(true);
    setTimeout(() => {
      const demoModels: HuggingFaceModel[] = [
        {
          id: 'meta-llama/Llama-2-7b-chat-hf',
          name: 'Llama 2 7B Chat',
          description: 'Llama 2 is a collection of pretrained and fine-tuned generative text models ranging in scale from 7 billion to 70 billion parameters.',
          tags: ['llm', 'chatbot', 'meta'],
          downloads: 978500,
          likes: 7842,
        },
        {
          id: 'mistralai/Mistral-7B-Instruct-v0.2',
          name: 'Mistral 7B Instruct',
          description: 'Mistral 7B is a strong pretrained generative text model, released with an Apache 2.0 license.',
          tags: ['llm', 'mistral', 'instruction-tuned'],
          downloads: 546800,
          likes: 5623,
        },
        {
          id: 'stabilityai/stable-diffusion-xl-base-1.0',
          name: 'Stable Diffusion XL',
          description: 'Stable Diffusion XL is a text-to-image latent diffusion model built upon the Stable Diffusion framework.',
          tags: ['stable-diffusion', 'text-to-image', 'diffusers'],
          downloads: 1232400,
          likes: 9453,
        },
        {
          id: 'google/gemma-7b-it',
          name: 'Gemma 7B Instruct',
          description: 'Gemma is a family of lightweight, state-of-the-art open models from Google built from the research and technology used to create the Gemini models.',
          tags: ['llm', 'google', 'instruction-tuned'],
          downloads: 634200,
          likes: 6354,
        },
        {
          id: 'runwayml/stable-diffusion-v1-5',
          name: 'Stable Diffusion 1.5',
          description: 'Stable Diffusion is a text-to-image model that generates images from text.',
          tags: ['stable-diffusion', 'text-to-image', 'diffusers'],
          downloads: 1876500,
          likes: 11234,
        },
      ];
      setModels(demoModels);
      setIsLoading(false);
    }, 1000);
  }, [user]);

  const handleModelSelect = (model: HuggingFaceModel) => {
    setSelectedModel(model);
  };
  
  const handleSendMessage = async (message: string): Promise<string> => {
    // In a real implementation, this would communicate with Hugging Face API
    return new Promise((resolve) => {
      setTimeout(() => {
        if (selectedModel?.id.includes('llama')) {
          resolve(`This is a simulated response from ${selectedModel?.name}. \n\nYour message was: "${message}"\n\nLlama 2 is responding with a helpful, harmless, and honest answer based on the latest research and capabilities as of my training.`);
        } else if (selectedModel?.id.includes('mistral')) {
          resolve(`[Mistral AI Assistant] \n\nYou asked: "${message}"\n\nResponse: I'm a simulation of Mistral 7B. In a real implementation, this would connect to the Mistral API to generate a response to your query.`);
        } else if (selectedModel?.id.includes('gemma')) {
          resolve(`Gemma: Thank you for your message: "${message}"\n\nHere's what I can tell you as a Gemma 7B simulation. This response would normally be generated by the actual Gemma model through the Hugging Face API.`);
        } else if (selectedModel?.id.includes('stable-diffusion')) {
          resolve(`[Image Generation Model Selected]\n\nPrompt: "${message}"\n\nIn a real implementation, this would generate an image based on your text prompt using the ${selectedModel?.name} model.`);
        } else {
          resolve(`I'm simulating a response from the selected model: ${selectedModel?.name}.\n\nYour input: "${message}"\n\nIn a production environment, this would make an API call to Hugging Face to interact with this model.`);
        }
      }, 1500);
    });
  };

  if (!user) {
    return <Navigate to="/" />;
  }

  if (!hasStarterAccess) {
    return <Navigate to="/pricing" />;
  }

  return (
    <DashboardLayout
      title={t('starter_dashboard')}
      subtitle={t('starter_dashboard_subtitle')}
      planName={t('starter_plan')}
      planIcon={<FiStar className="w-5 h-5" />}
    >
      <div className="min-h-screen bg-theme-gradient">
        <Header />
        <div className="pt-24 pb-20">
          <div className="container mx-auto px-4">
            {/* Dashboard Header */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mb-10 text-center"
            >
              <h1 className="text-4xl font-bold text-white mb-4">{t('starter_dashboard')}</h1>
              <p className="text-xl text-violet-200 max-w-3xl mx-auto">
                {t('starter_dashboard_description')}
              </p>
            </motion.div>

            {/* Main Dashboard Content */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {/* Sidebar with models list */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                className="md:col-span-1 bg-[var(--background)] bg-opacity-10 backdrop-blur-sm rounded-2xl p-6 border border-[var(--border)]"
              >
                <h2 className="text-2xl font-semibold text-white mb-6">{t('huggingface_models')}</h2>
                
                {isLoading ? (
                  <div className="flex justify-center items-center h-40">
                    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-violet-500"></div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {models.map((model) => (
                      <div 
                        key={model.id}
                        onClick={() => handleModelSelect(model)}
                        className={`p-4 rounded-xl cursor-pointer transition-all ${
                          selectedModel?.id === model.id 
                            ? 'bg-violet-800 bg-opacity-50 border border-violet-500' 
                            : 'bg-white bg-opacity-5 hover:bg-opacity-10'
                        }`}
                      >
                        <h3 className="text-white font-medium">{model.name}</h3>
                        <p className="text-violet-300 text-sm truncate">{model.description}</p>
                        <div className="flex gap-2 mt-2">
                          {model.tags.slice(0, 3).map((tag) => (
                            <span key={tag} className="text-xs bg-violet-900 bg-opacity-50 text-violet-200 px-2 py-1 rounded-full">
                              {tag}
                            </span>
                          ))}
                        </div>
                        <div className="flex justify-between mt-3 text-sm text-violet-300">
                          <span>⬇️ {model.downloads.toLocaleString()}</span>
                          <span>❤️ {model.likes.toLocaleString()}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="mt-6 pt-6 border-t border-violet-500 border-opacity-30">
                  <a 
                    href="https://huggingface.co/models" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center text-violet-300 hover:text-white transition-colors"
                  >
                    <span>Explore more on Hugging Face</span>
                    <FiExternalLink className="ml-2" />
                  </a>
                </div>
              </motion.div>

              {/* Chat interface */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 }}
                className="md:col-span-2 h-[70vh]"
              >
                {selectedModel ? (
                  <ChatWithAuth
                    modelId={selectedModel.id}
                    modelName={selectedModel.name}
                    sendMessage={handleSendMessage}
                    placeholder={`Chat with ${selectedModel.name}...`}
                  />
                ) : (
                  <div className="flex flex-col items-center justify-center h-full bg-[var(--background)] bg-opacity-10 backdrop-blur-sm rounded-2xl p-6 border border-[var(--border)]">
                    <FiCpu className="w-16 h-16 text-violet-400 mb-4" />
                    <h3 className="text-xl font-semibold text-white mb-2">{t('select_model')}</h3>
                    <p className="text-violet-300 text-center max-w-md">
                      {t('select_model_instruction')}
                    </p>
                  </div>
                )}
              </motion.div>
            </div>

            {/* Subscription Info */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="mt-10 bg-[var(--background)] bg-opacity-10 backdrop-blur-sm rounded-2xl p-6 border border-[var(--border)]"
            >
              <h2 className="text-2xl font-semibold text-white mb-4">{t('subscription_info')}</h2>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0 bg-violet-700 bg-opacity-30 p-3 rounded-full mr-4">
                    <FiUser className="w-6 h-6 text-violet-300" />
                  </div>
                  <div>
                    <p className="text-sm text-violet-300">{t('current_plan')}</p>
                    <p className="text-lg font-medium text-white">Starter</p>
                  </div>
                </div>
                
                <div className="flex items-center">
                  <div className="flex-shrink-0 bg-violet-700 bg-opacity-30 p-3 rounded-full mr-4">
                    <FiZap className="w-6 h-6 text-violet-300" />
                  </div>
                  <div>
                    <p className="text-sm text-violet-300">{t('api_calls')}</p>
                    <p className="text-lg font-medium text-white">427 / 1,000</p>
                  </div>
                </div>
                
                <div className="flex items-center">
                  <div className="flex-shrink-0 bg-violet-700 bg-opacity-30 p-3 rounded-full mr-4">
                    <FiDollarSign className="w-6 h-6 text-violet-300" />
                  </div>
                  <div>
                    <p className="text-sm text-violet-300">{t('billing')}</p>
                    <p className="text-lg font-medium text-white">$9.99/month</p>
                  </div>
                </div>
              </div>
              
              <div className="mt-6 pt-6 border-t border-violet-500 border-opacity-30 flex justify-between items-center">
                <p className="text-violet-300">
                  {t('want_more_features')}
                </p>
                <Link
                  to="/pricing"
                  className="px-6 py-2 bg-violet-600 hover:bg-violet-700 text-white rounded-lg transition-colors"
                >
                  {t('upgrade_plan')}
                </Link>
              </div>
            </motion.div>
          </div>
        </div>
        <AnimatedFooter />
      </div>
      <SubscriptionDashboard />
    </DashboardLayout>
  );
}
